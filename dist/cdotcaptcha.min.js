// --------------------------------------------------------
// --------------------------------------------------------
// ------------- some really messy js for ui --------------
// --------------------------------------------------------  
// --------------------------------------------------------

/* --------------------------------------------------------
   ------------- utility ui functions ---------------------
   --------------------------------------------------------  */

function initObject(obj,classnames,children) {
    children = children ? children : [];
    for (let index = 0; index < classnames.length; index++) 
        obj.classList.add(classnames[index]);
    for (let index = 0; index < children.length; index++) 
        obj.appendChild(children[index]);
    return obj;
}
function createDiv(classnames,children) {
    var obj = document.createElement("div");
    return initObject(obj,classnames,children);
}
function createNode(nodetype,classnames,children) {
    var obj = document.createElement(nodetype);
    return initObject(obj,classnames,children);
}
function createText(text,classnames,children) {
    var label = document.createElement("p");
    label.innerText = text;
    return initObject(label,classnames,children);
}
function createLink(text,link,classnames,children) {
    var a = document.createElement("a");
    a.innerText = text;
    a.href = link;
    return initObject(a,classnames,children);
}

/* --------------------------------------------------------
   ------------- class for captcha to use to intialize ----
   --------------------------------------------------------  */

class CdotCaptcha {

    //begin costructor (this is where i do the ui stuff :) basically all if it )

    constructor(id, serverurl,message,disableelements) {

        //defining varibales and ui stuff

        this.disableelements = disableelements ? disableelements : [];
        message = message ? message : "I am no robot";

        const holder = document.getElementById(id);

        this.disableelements.forEach(element => {
            element.disabled = true;
        });
        
        // create objects in html :=)

        holder.appendChild(this.cdotcapchacontainer = createDiv(["cdotcapchacontainer"],[
            createDiv(["approve"],[
                this.checkbox = createDiv(["checkbox"],
                [
                    createDiv(["loader"],[
                    
                    ]),
                    createDiv(["checkmark"],[
                        createDiv(["c0"],[createDiv(["c1"],[createDiv(["c2"],[])])])
                    ]),
                    this.checkboxbutton = createNode("button",["input"],[
                        
                    ])
                ]),
                createText(message,["robottext"],[]),
            ]),
            createDiv(["info"],[
                createLink("Powered by C.Captcha","https://www.npmjs.com/package/c.imagecaptcha",[]),
            ])
        ]));

        

        this.checkboxbutton.addEventListener("click",(e) => {
            e.preventDefault();

            if(!this.isverif)
                this.challenge();
        })

        this.isverif = false;
        this.serverurl = serverurl;
        

        // create more objects in html :=)

        this.challengediv = createDiv(["cdotcapchachallengediv"],[
            createDiv(["content"],[
                createDiv(["squareholder"],[
                    this.captchadiv = createDiv(["imgdiv"],[
                        this.captchaimg = createNode("img",[],[
                    
                        ]),
                        this.selectgrid = createDiv(["selectors"],[
                    
                        ]),
                    ]),
                    this.loaddiv = createDiv(["loaddivdiv"],[
                        createDiv([],[
                            createDiv([],[]),
                            createDiv([],[]),
                            createDiv([],[]),
                        ]),
                    ]),
                ]),
                this.questionp  = createText("",[]),
                this.submitbutton = createNode("button",[]),
                this.cancelbutton = createNode("button",[])
            ]),
        ])
        holder.appendChild(this.challengediv);

        // create objects in html :=) in a grid layout

        this.gridelements = [];
        for (let index = 0; index < 9; index++) {
            const div = document.createElement("button");
            this.selectgrid.appendChild(div);
            div.classList.add("item");
            div.addEventListener("click",(e) => {
                e.preventDefault();
                div.classList.toggle("selected");
            });
            this.gridelements.push(div);
        }

        // define some events

        this.submitbutton.addEventListener("click",(e) => {
            e.preventDefault();
            this.loaddiv.classList.add("enabled");
            this.captchadiv.classList.remove("enabled");
            this.challenge();
        })
        this.submitbutton.innerText = "Submit";
       

        this.cancelbutton.addEventListener("click",(e) => {
            e.preventDefault();
            this.challengediv.classList.remove("enable");

            if(this.checkbox.classList.contains("checking"))
                this.checkbox.classList.remove("checking");
            if(this.checkbox.classList.contains("approved"))
                this.checkbox.classList.remove("approved");
        })
        this.cancelbutton.innerText = "Cancel";


    }

    //end costructor

    // begin challange function that gets triggered by a button

    async challenge() {


        if(!this.checkbox.classList.contains("checking"))
            this.checkbox.classList.add("checking");
        if(this.checkbox.classList.contains("approved"))
            this.checkbox.classList.remove("approved");

        var jsonobj = {};

        jsonobj["solution"] = [];
        for (let index = 0; index < this.gridelements.length; index++) {
            jsonobj["solution"].push(this.gridelements[index].classList.contains("selected"));
        }
 
        //request to server backend for getting status and if needed info about the new challange

        fetch(this.serverurl, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonobj) })
                .then(response => response.json())
                .then(response => {
                    console.log("Capcha Returns with Status Code : "+response.status);
                    if(response.status == "success")
                    {     
                        this.challengediv.classList.remove("enable");


                        if(this.checkbox.classList.contains("checking"))
                            this.checkbox.classList.remove("checking");
                        if(!this.checkbox.classList.contains("approved"))
                            this.checkbox.classList.add("approved");

                        this.isverif = true;

                        this.disableelements.forEach(element => {
                            element.disabled = false;
                        });
                  
                    }
                    if(response.status == "challenged")
                    {
                        for (let index = 0; index < this.gridelements.length; index++) {
                            this.gridelements[index].classList.remove("selected");
                        }
                    
                        this.questionp.innerText = response.challenge.question;
                        this.captchaimg.src = response.challenge.imagedata;

                        this.loaddiv.classList.remove("enabled");
                        this.captchadiv.classList.add("enabled");

                        if(!this.challengediv.classList.contains("enable"))
                            this.challengediv.classList.add("enable");

     
                    }
        })

       
    }


}